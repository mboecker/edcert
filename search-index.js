var searchIndex = {};
searchIndex['edcert'] = {"items":[[0,"ed25519","edcert","",null,null],[5,"generate_keypair","edcert::ed25519","This method generates a random ed25519 keypair from a cryptographically secure source\n(on unix this is /dev/urandom).",null,null],[5,"sign","","This method takes a data vector and a private key and computes the signature which can be\nverified using the public key.",null,null],[5,"verify","","This method takes a data vector, a signature and a public key and returns true, if the\nsignature has been created using the correct private key.",null,null],[17,"PRIVATE_KEY_LEN","","This is the length of a ed25519 private key.",null,null],[17,"PUBLIC_KEY_LEN","","This is the length of a ed25519 public key.",null,null],[0,"meta","edcert","",null,null],[3,"Meta","edcert::meta","",null,null],[11,"fmt","","",0,{"inputs":[{"name":"meta"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"decode","","",0,{"inputs":[{"name":"meta"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",0,{"inputs":[{"name":"meta"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"meta"}],"output":{"name":"meta"}}],[11,"new_empty","","Creates a new Meta object, which can be used to store metadata for a certificate.",0,{"inputs":[{"name":"meta"}],"output":{"name":"meta"}}],[11,"new","","Creates a new Meta object using the given BTreeMap.",0,{"inputs":[{"name":"meta"},{"name":"btreemap"}],"output":{"name":"meta"}}],[11,"key_exists","","This method returns true iff the key exists.",0,{"inputs":[{"name":"meta"},{"name":"str"}],"output":{"name":"bool"}}],[11,"get","","This method returns the value of key, if it exists. Otherwise it returns None.",0,{"inputs":[{"name":"meta"},{"name":"str"}],"output":{"name":"option"}}],[11,"set","","This method assigns a value to a given key.",0,{"inputs":[{"name":"meta"},{"name":"str"},{"name":"str"}],"output":null}],[11,"get_values_mut","","This method returns a mutable reference to the tree object.",0,{"inputs":[{"name":"meta"}],"output":{"name":"btreemap"}}],[11,"get_values","","This method returns a reference to the tree object.",0,{"inputs":[{"name":"meta"}],"output":{"name":"btreemap"}}],[11,"fill_bytes","","This method fills the given byte vector with a \"hash\" which is created from all keys\nand values.",0,null],[0,"signature","edcert","",null,null],[3,"Signature","edcert::signature","",null,null],[11,"fmt","","",1,{"inputs":[{"name":"signature"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",1,{"inputs":[{"name":"signature"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",1,{"inputs":[{"name":"signature"},{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"signature"}],"output":{"name":"signature"}}],[11,"new","","Creates a new Signature with the given signature. It is assumed that the signature is\ncomputed usign the master key.",1,{"inputs":[{"name":"signature"},{"name":"vec"}],"output":{"name":"signature"}}],[11,"with_parent","","Creates a new Signature with the given parent and given signature.",1,{"inputs":[{"name":"signature"},{"name":"box"},{"name":"vec"}],"output":{"name":"signature"}}],[11,"is_signed_by_master","","This method will return true iff the certificate has no parent certificate.\nIt is then signed with the master key.",1,{"inputs":[{"name":"signature"}],"output":{"name":"bool"}}],[11,"get_parent","","This method will return the parent Certificate, or None, if it is signed with the\nmaster key.",1,{"inputs":[{"name":"signature"}],"output":{"name":"option"}}],[11,"get_hash","","This method will return the signature given by the parent.",1,{"inputs":[{"name":"signature"}],"output":{"name":"vec"}}],[0,"certificate","edcert","",null,null],[3,"Certificate","edcert::certificate","",null,null],[17,"SIGNATURE_LEN","","This is the length of a ed25519 signature.",null,null],[17,"CERTIFICATE_BYTE_LEN","","This is the length of a safehash of a certificate.",null,null],[11,"fmt","","",2,{"inputs":[{"name":"certificate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",2,{"inputs":[{"name":"certificate"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",2,{"inputs":[{"name":"certificate"},{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"certificate"}],"output":{"name":"certificate"}}],[11,"generate_random","","This method generates a random public/private keypair and a certificate for it.",2,{"inputs":[{"name":"certificate"},{"name":"meta"},{"name":"datetime"}],"output":{"name":"certificate"}}],[11,"get_meta_mut","","This method returns a mutable reference to the meta structure.",2,{"inputs":[{"name":"certificate"}],"output":{"name":"meta"}}],[11,"get_meta","","This method returns a reference to the meta structure.",2,{"inputs":[{"name":"certificate"}],"output":{"name":"meta"}}],[11,"get_public_key","","This method returns a reference to the public key.",2,{"inputs":[{"name":"certificate"}],"output":{"name":"vec"}}],[11,"get_private_key","","This method returns the private key, if it is known, or None if the certificate has been\ninitialized without the private key.",2,{"inputs":[{"name":"certificate"}],"output":{"name":"option"}}],[11,"has_private_key","","This method returns true, if the private key is saved in the certificate.",2,{"inputs":[{"name":"certificate"}],"output":{"name":"bool"}}],[11,"get_expires","","This method returns the expiration date as a RFC 3339 string.",2,{"inputs":[{"name":"certificate"}],"output":{"name":"str"}}],[11,"set_private_key","","This method replaces the current private key of this certificate with the given one.",2,{"inputs":[{"name":"certificate"},{"name":"vec"}],"output":null}],[11,"is_expired","","This method checks, if this certificates expiration date is now or in the past.",2,{"inputs":[{"name":"certificate"}],"output":{"name":"bool"}}],[11,"safehash","","This method returns a \"hash\". This is used to validate the certificate.\nAll relevant information of the certificate is used to produce the hash,\nincluding the public key, meta data and the expiration date.",2,null],[11,"get_parent","","This method returns the parent certificate of this certificate, if it exists.",2,{"inputs":[{"name":"certificate"}],"output":{"name":"option"}}],[11,"is_signed","","This method returns true, if a signature exists (is not None). This doesn't validate the\nsignature.",2,{"inputs":[{"name":"certificate"}],"output":{"name":"bool"}}],[11,"sign","","This method signs the given data and returns the signature.",2,null],[11,"sign_with_master","","This method signs this certificate with the given private master key.",2,null],[11,"sign_certificate","","This method signs another certificate with the private key of this certificate.",2,{"inputs":[{"name":"certificate"},{"name":"certificate"}],"output":{"name":"result"}}],[11,"is_valid","","This method verifies that this certificate is valid by analyzing the trust chain.",2,null],[11,"verify","","This method verifies that the given signature is valid for the given data.",2,null],[11,"is_revoked","","",2,{"inputs":[{"name":"certificate"},{"name":"str"}],"output":{"name":"result"}}],[11,"from_json","","takes a json-encoded byte vector and tries to create a certificate from it.",2,null],[11,"to_json","","Converts this certificate in a json-encoded byte vector.",2,{"inputs":[{"name":"certificate"}],"output":{"name":"vec"}}],[11,"save","","Saves this certificate into a folder: one file for the certificate and one file for the\nprivate key.",2,{"inputs":[{"name":"certificate"},{"name":"str"}],"output":null}],[11,"load_from_file","","This method loads a certificate from a file.",2,{"inputs":[{"name":"certificate"},{"name":"str"}],"output":{"name":"result"}}],[11,"load_private_key","","This method reads a private key from a file and sets it in this certificate.",2,{"inputs":[{"name":"certificate"},{"name":"str"}],"output":{"name":"result"}}],[0,"certificate_verificator","edcert","",null,null],[3,"CertificateVerificator","edcert::certificate_verificator","",null,null],[11,"new","","Call this to create a CV without a revoke server.",3,null],[11,"with_revokeserver","","Call this to create a CV with a revoke server.\nFor every certificate the revoke server is asked if it is known.",3,null],[11,"is_valid","","Checks the certificate if it is valid.\nIf the CV knows a revoke server, that is queried as well.",3,{"inputs":[{"name":"certificateverificator"},{"name":"certificate"}],"output":{"name":"result"}}]],"paths":[[3,"Meta"],[3,"Signature"],[3,"Certificate"],[3,"CertificateVerificator"]]};
initSearch(searchIndex);
